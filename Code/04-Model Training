{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hO_sVUegSE3J","outputId":"4567978c-2f61-4a0f-cb6b-8b838d68c080","executionInfo":{"status":"ok","timestamp":1732196027869,"user_tz":-330,"elapsed":279803,"user":{"displayName":"Yuvasree Pamujula","userId":"06890017176504273970"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error (MSE): 0.08245733986441058\n","Root Mean Squared Error (RMSE): 0.2871538609603057\n","Mean Absolute Error (MAE): 0.21395404978791843\n","R-squared (R2): 0.7292066537016327\n","Mean Squared Error (MSE) on original scale: 16069.555911989557\n","Root Mean Squared Error (RMSE) on original scale: 126.76575212568085\n","Mean Absolute Error (MAE) on original scale: 77.63556834989853\n","R-squared (R2) on original scale: 0.6387928556810306\n","Mean Absolute Percentage Error (MAPE) on original scale: 22.123977523003486%\n"]}],"source":["# Section F Modeling and Evaluation...........\n","\n","# Model 1 - RandomForestRegressor with Best Hyperparameters\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n","import numpy as np\n","\n","# Apply log transformation to the target variable\n","predict_df['log_totalFare'] = np.log1p(predict_df['totalFare'])\n","\n","# Use the transformed target variable for modeling\n","y_log = predict_df['log_totalFare']\n","X = predict_df.drop(['totalFare', 'log_totalFare'], axis=1)\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y_log, test_size=0.2, random_state=42)\n","\n","# Initialize and train the RandomForestRegressor model with optimized parameters\n","rf_reg = RandomForestRegressor(n_estimators=150, max_depth=15, min_samples_split=2, min_samples_leaf=1, n_jobs=-1, random_state=42)\n","rf_reg.fit(X_train, y_train)\n","\n","# Make predictions on the test set using RandomForestRegressor\n","y_pred_rf = rf_reg.predict(X_test)\n","\n","# Evaluate the model's performance\n","mse_rf = mean_squared_error(y_test, y_pred_rf)\n","rmse_rf = np.sqrt(mse_rf)\n","mae_rf = mean_absolute_error(y_test, y_pred_rf)\n","r2_rf = r2_score(y_test, y_pred_rf)\n","\n","# Print the evaluation metrics\n","print(f\"Mean Squared Error (MSE): {mse_rf}\")\n","print(f\"Root Mean Squared Error (RMSE): {rmse_rf}\")\n","print(f\"Mean Absolute Error (MAE): {mae_rf}\")\n","print(f\"R-squared (R2): {r2_rf}\")\n","\n","# If you want to convert the predictions back to the original scale\n","y_test_original = np.expm1(y_test)\n","y_pred_rf_original = np.expm1(y_pred_rf)\n","\n","# Evaluate the model's performance on the original scale\n","mse_rf_original = mean_squared_error(y_test_original, y_pred_rf_original)\n","rmse_rf_original = np.sqrt(mse_rf_original)\n","mae_rf_original = mean_absolute_error(y_test_original, y_pred_rf_original)\n","r2_rf_original = r2_score(y_test_original, y_pred_rf_original)\n","\n","# Calculate Mean Absolute Percentage Error (MAPE)\n","mape_rf_original = np.mean(np.abs((y_test_original - y_pred_rf_original) / y_test_original)) * 100\n","\n","# Print the evaluation metrics on the original scale\n","print(f\"Mean Squared Error (MSE) on original scale: {mse_rf_original}\")\n","print(f\"Root Mean Squared Error (RMSE) on original scale: {rmse_rf_original}\")\n","print(f\"Mean Absolute Error (MAE) on original scale: {mae_rf_original}\")\n","print(f\"R-squared (R2) on original scale: {r2_rf_original}\")\n","print(f\"Mean Absolute Percentage Error (MAPE) on original scale: {mape_rf_original}%\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6vcx6v-cXegO"},"outputs":[],"source":["predict_df = predict_df.drop(columns=['log_totalFare'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R7MTUkWNudp3","outputId":"0347f088-1ccc-42f9-de3a-64e53d5e7c85","executionInfo":{"status":"ok","timestamp":1732196354254,"user_tz":-330,"elapsed":31810,"user":{"displayName":"Yuvasree Pamujula","userId":"06890017176504273970"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error (MSE): 7911.079972818398\n","Root Mean Squared Error (RMSE): 88.94425205047484\n","Mean Absolute Error (MAE): 62.90886869427755\n","R-squared (R2): 0.7806134365962605\n","Mean Absolute Percentage Error (MAPE): 18.3767579594987%\n"]}],"source":["# Model 2: To handle outliers, applying Box-Cox transformation to handle data skews and XGB to improve model performance\n","\n","import xgboost as xgb\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n","import numpy as np\n","from scipy.stats import boxcox\n","from scipy.special import inv_boxcox\n","\n","# Cap outliers at the 1st and 99th percentiles\n","lower_bound = predict_df['totalFare'].quantile(0.01)\n","upper_bound = predict_df['totalFare'].quantile(0.99)\n","\n","predict_df['totalFare'] = np.where(predict_df['totalFare'] < lower_bound, lower_bound, predict_df['totalFare'])\n","predict_df['totalFare'] = np.where(predict_df['totalFare'] > upper_bound, upper_bound, predict_df['totalFare'])\n","\n","# Apply Box-Cox transformation to the capped target variable\n","y_boxcox, lam = boxcox(predict_df['totalFare'] + 1)\n","\n","# Use the transformed target variable for modeling\n","y_boxcox = pd.Series(y_boxcox, index=predict_df.index)\n","X = predict_df.drop(['totalFare'], axis=1)\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y_boxcox, test_size=0.2, random_state=42)\n","\n","# Initialize and train the XGBoost model\n","xgb_reg = xgb.XGBRegressor(n_estimators=100, max_depth=10, learning_rate=0.1, random_state=42)\n","xgb_reg.fit(X_train, y_train)\n","\n","# Make predictions on the test set\n","y_pred = xgb_reg.predict(X_test)\n","\n","# Convert the predictions back to the original scale using the inverse Box-Cox transformation\n","y_pred_original = inv_boxcox(y_pred, lam)\n","y_test_original = inv_boxcox(y_test, lam)\n","\n","# Evaluate the model's performance\n","mse = mean_squared_error(y_test_original, y_pred_original)\n","rmse = np.sqrt(mse)\n","mae = mean_absolute_error(y_test_original, y_pred_original)\n","r2 = r2_score(y_test_original, y_pred_original)\n","mape = np.mean(np.abs((y_test_original - y_pred_original) / y_test_original)) * 100\n","\n","# Print the evaluation metrics\n","print(f\"Mean Squared Error (MSE): {mse}\")\n","print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n","print(f\"Mean Absolute Error (MAE): {mae}\")\n","print(f\"R-squared (R2): {r2}\")\n","print(f\"Mean Absolute Percentage Error (MAPE): {mape}%\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DDNjHS11x3lS","outputId":"e94f2853-0098-48cb-a296-a950409424dd","executionInfo":{"status":"ok","timestamp":1732196438917,"user_tz":-330,"elapsed":84665,"user":{"displayName":"Yuvasree Pamujula","userId":"06890017176504273970"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error (MSE): 0.0432328439211053\n","Root Mean Squared Error (RMSE): 0.207925092091131\n","Mean Absolute Error (MAE): 0.1521548484909141\n","R-squared (R2): 0.850182925199395\n","Mean Squared Error (MSE) on original scale: 6208.453953718357\n","Root Mean Squared Error (RMSE) on original scale: 78.79374311275203\n","Mean Absolute Error (MAE) on original scale: 54.01068228164025\n","R-squared (R2) on original scale: 0.8278299067085039\n","Mean Absolute Percentage Error (MAPE) on original scale: 15.499086555825672%\n"]}],"source":["# Final Best Model - XGBoost with Best Hyperparameters\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n","import xgboost as xgb\n","import numpy as np\n","\n","# Apply log transformation to the target variable\n","predict_df['log_totalFare'] = np.log1p(predict_df['totalFare'])\n","\n","# Use the transformed target variable for modeling\n","y_log = predict_df['log_totalFare']\n","X = predict_df.drop(['totalFare', 'log_totalFare'], axis=1)\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y_log, test_size=0.2, random_state=42)\n","\n","# Initialize and train the XGBoost model with optimized parameters\n","xgb_reg1 = xgb.XGBRegressor(n_estimators=150, max_depth=15, learning_rate=0.1, random_state=42)\n","xgb_reg1.fit(X_train, y_train)\n","\n","# Make predictions on the test set using XGBoost\n","y_pred_xgb = xgb_reg1.predict(X_test)\n","\n","# Evaluate the model's performance\n","mse_xgb = mean_squared_error(y_test, y_pred_xgb)\n","rmse_xgb = np.sqrt(mse_xgb)\n","mae_xgb = mean_absolute_error(y_test, y_pred_xgb)\n","r2_xgb = r2_score(y_test, y_pred_xgb)\n","\n","# Print the evaluation metrics\n","print(f\"Mean Squared Error (MSE): {mse_xgb}\")\n","print(f\"Root Mean Squared Error (RMSE): {rmse_xgb}\")\n","print(f\"Mean Absolute Error (MAE): {mae_xgb}\")\n","print(f\"R-squared (R2): {r2_xgb}\")\n","\n","# If you want to convert the predictions back to the original scale\n","y_test_original = np.expm1(y_test)\n","y_pred_xgb_original = np.expm1(y_pred_xgb)\n","\n","# Evaluate the model's performance on the original scale\n","mse_xgb_original = mean_squared_error(y_test_original, y_pred_xgb_original)\n","rmse_xgb_original = np.sqrt(mse_xgb_original)\n","mae_xgb_original = mean_absolute_error(y_test_original, y_pred_xgb_original)\n","r2_xgb_original = r2_score(y_test_original, y_pred_xgb_original)\n","\n","# Calculate Mean Absolute Percentage Error (MAPE)\n","mape_xgb_original = np.mean(np.abs((y_test_original - y_pred_xgb_original) / y_test_original)) * 100\n","\n","# Print the evaluation metrics on the original scale\n","print(f\"Mean Squared Error (MSE) on original scale: {mse_xgb_original}\")\n","print(f\"Root Mean Squared Error (RMSE) on original scale: {rmse_xgb_original}\")\n","print(f\"Mean Absolute Error (MAE) on original scale: {mae_xgb_original}\")\n","print(f\"R-squared (R2) on original scale: {r2_xgb_original}\")\n","print(f\"Mean Absolute Percentage Error (MAPE) on original scale: {mape_xgb_original}%\")"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}